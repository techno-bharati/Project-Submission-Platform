generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  Projects Projects[]

  role       String    @default("user")
  banned     Boolean   @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// App Logic
model Projects {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title              String
  description        String
  domain             String[]
  githubUrl          String
  liveLink           String?
  projectThumbnail   String
  verificationStatus ProjectVerificationStatus @default(PENDING)
  technologies       String[]
  zip                String
  userId             String

  user User @relation(fields: [userId], references: [id])
}

enum ProjectVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ProjectDomains {
  WebDevelopment
  MobileAppDevelopment
  MachineLearning
  ArtificialIntelligence
  DataScience
  CyberSecurity
  InternetOfThings
  Blockchain
  Robotics
  EmbeddedSystems
  ComputerVision
  FinTech
  EdTech
  HealthTech
  Others
}
